{"data":{"current":{"html":"<h2 id=\"overview\">Overview</h2>\n<p>Strontium is designed to make database access extremely transparent to the developer whilst also reducing the difficulty\nof common database interactions. All of the query tools are designed to be helpful most of the time but immediately get\nout of your way should you require more complexity in your application.</p>\n<p>Strontium is designed to work with SQL Databases - primarily PostgreSQL.<br />\nSome aspects of the data layer may work with other SQL databases such as MySQL but that is not something that we currently test for.</p>\n<h2 id=\"key-concepts\">Key Concepts</h2>\n<h3 id=\"sqlstore\">SQLStore</h3>\n<p>The Strontium <code class=\"language-text\">SQLStore</code> provides the base interface for all database drivers. A <code class=\"language-text\">SQLStore</code> exposes a single method: <code class=\"language-text\">query</code></p>\n<p>How the underlying driver implements the query method is designed to be largely abstracted with the developer's main concern\nbeing the input to the query function.</p>\n<p>Strontium ships with an implementation of SQLStore for Postgres however it is possible to use third party adapters to implement\nsupport for other datastore such as MySQL or Oracle.</p>\n<p>It is rare that a developer needs to work directly with the SQLStore as most work can be done at a higher level of abstraction\nhowever it's important to know it exists in case there is a desire to interact directly with the database.</p>\n<h3 id=\"queries\">Queries</h3>\n<p>Strontium provides a powerful and intuitive typed Query builder that allows for relatively complex queries to be constructed\nwithout leaving the TypeScript type system.  </p>\n<p>The Query builder is used internally by most of the Framework's SQL helpers and is made available for cases when a greater level\nof control over the query is needed or there is a desire to use a SQL feature such as <code class=\"language-text\">LOWER</code> or <code class=\"language-text\">LEVENSHTEIN</code>.</p>\n<p>Although the Repository model can handle most workloads it is not uncommon to see at least a few queries in most Strontium projects\nto handle particular performance or business logic concerns.  </p>\n<h3 id=\"repositories\">Repositories</h3>\n<p>Repositories provide the bread and butter of data access in Strontium. They are easy to use and support the most common 80% of data workloads.</p>\n<p>Strontium also allows for Repositories to be extended which allows them to be combined with Queries in a way that supports\nrelatively sophisticated data access patterns.</p>\n<h3 id=\"filters\">Filters</h3>\n<p>Strontium Filters are simply typed objects that allow for MongoDB style conditions to be constructed in TypeScript. </p>\n<p>Both Queries and Repositories make use of Filters to build the \"WHERE\" clauses that are sent to the final database.</p>\n<p>It's important to remember that Filters are POJOs (Plain Old Javascript Objects) - and are simply a structured way of representing\nthe query condition. This opens up some interesting additional use cases for Filters such as using them over a network to power\ncomplex data selectors on API endpoints. </p>","tableOfContents":"<ul>\n<li><a href=\"/reference/database/introduction/#overview\">Overview</a></li>\n<li>\n<p><a href=\"/reference/database/introduction/#key-concepts\">Key Concepts</a></p>\n<ul>\n<li><a href=\"/reference/database/introduction/#sqlstore\">SQLStore</a></li>\n<li><a href=\"/reference/database/introduction/#queries\">Queries</a></li>\n<li><a href=\"/reference/database/introduction/#repositories\">Repositories</a></li>\n<li><a href=\"/reference/database/introduction/#filters\">Filters</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Introduction","module":"Database"}}},"pageContext":{"slug":"/reference/database/introduction/"}}