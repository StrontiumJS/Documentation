{"data":{"current":{"html":"<p>PostgreSQL is the default database driver that Strontium uses and is the best supported way of using the framework.</p>\n<p>Out of the box Strontium includes full support for PostgreSQL connection pooling, SSL and some additional advanced functionality.</p>\n<h2 id=\"pgstore\">PGStore</h2>\n<p><strong>Extends</strong> <a href=\"/reference/framework/runtime\">Runtime</a>\n<strong>Implements</strong> <a href=\"/reference/database/core#SQLStore\">SQLStore</a></p>\n<p>The PGStore object is a Strontium <code class=\"language-text\">Process</code> that implements SQLStore and provides access to Postgres.</p>\n<p>As PGStore is itself a <code class=\"language-text\">Process</code> it's important to register the object in the Runtime. </p>\n<h3 id=\"constructorpoolparameters\">constructor(poolParameters)</h3>\n<p>The first argument to PGStore is the connection options which are passed directly to <a href=\"https://node-postgres.com/api/pool\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">node-postgres</a>.\nSome common and useful configuration settings are illustrated below.</p>\n<p>N.B Creating a <code class=\"language-text\">PGStore</code> instance does not automatically open a connection. </p>\n<p>No connections will be opened until <code class=\"language-text\">.startup</code> is called.\nAttempting to use a store that has not had startup called will result in an error. </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">PGStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n     host<span class=\"token punctuation\">:</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// The hostname of the Postgres Server</span>\n     port<span class=\"token punctuation\">:</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// The port that the Postgres Server is available on </span>\n     user<span class=\"token punctuation\">:</span> <span class=\"token string\">\"strontium\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// The username to authenticate to Postgres with</span>\n     password<span class=\"token punctuation\">:</span> <span class=\"token string\">\"SuperSecret\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// The password to authenticate to Postgres with</span>\n     database<span class=\"token punctuation\">:</span> <span class=\"token string\">\"strontium\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// The database to connect to in Postgres</span>\n     min<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// The minimum number of open connections to Postgres that should be in the Pool</span>\n     max<span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// The maximum number of open connection to Postgres that should be in the Pool </span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"queryrquerystring-parameters-promisearrayr\">query<R>(queryString, parameters): Promise&#x3C;Array<R>></h3>\n<p>The <code class=\"language-text\">query</code> method is used to send queries to the SQL server.</p>\n<p>The first argument is the text to be sent to PostgreSQL. This text will not be escaped and care should be taken to avoid\npassing values which could be used for SQL injection into this parameter.</p>\n<p>The second argument is the parameters to pass with the query into PostgreSQL. More information about using parametrized queries\ncan be found in the <a href=\"https://www.postgresql.org/docs/9.5/xfunc-sql.html#XFUNC-SQL-FUNCTION-ARGUMENTS\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PostgresQL documentation</a>.</p>\n<p>The generic parameter allows the developer to pass in the expected format of the response from PostgreSQL so that the response of the function has this type.</p>\n<p>The response is an array of objects from the datastore that fulfill the query.</p>\n<h3 id=\"createtransactionisolationlevel-promisepgtransaction\">createTransaction(isolationLevel?): Promise<PGTransaction></h3>\n<p>The <code class=\"language-text\">createTransaction</code> method is used to open a new SQL Transaction and return an object that represents it.</p>\n<p>The first argument is an option <code class=\"language-text\">PGIsolationLevel</code> enum that allows the developer to select the <a href=\"https://www.postgresql.org/docs/9.1/transaction-iso.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">transaction serialization</a>\nlevel they would like to use. The default value is <code class=\"language-text\">PGIsolationLevel.READ_COMMITED</code> and is appropriate for most use cases.</p>\n<p>The response is a <code class=\"language-text\">PGTransaction</code> object that represents the newly opened transaction.</p>\n<h2 id=\"pgtransaction\">PGTransaction</h2>\n<p>The <code class=\"language-text\">PGTransaction</code> object represents a SQL transaction in PostgreSQL.</p>\n<h3 id=\"constructorconnection-logger\">constructor(connection, logger?)</h3>\n<p>The first argument to <code class=\"language-text\">PGTransaction</code> is the underlying node-pg connection that it is to operate on.\nIt is the responsibility of the instantiating component to ensure that the connection is properly established as a transaction\nin PostgreSQL and that the connection is not shared with another object.</p>\n<p>The second argument is an optional logger instance to which the transaction will log lifecycle events such as being opened and closed alongside it's unique transaction ID.\nThis can be helpful for debugging issues where transactions are not released. </p>\n<h3 id=\"queryrquerystring-parameters-promisearrayr-1\">query<R>(queryString, parameters): Promise&#x3C;Array<R>></h3>\n<p>The <code class=\"language-text\">query</code> method is used to send queries to the PostgreSQL server over the transaction. </p>\n<p>It's use is identical to that of the PGStore itself - documentation for which can be found above.</p>\n<h3 id=\"commit-promisevoid\">commit(): Promise<void></h3>\n<p>The <code class=\"language-text\">commit</code> method is used to commit the changes that have been performed in the transaction to the PostgreSQL database.</p>\n<p>This method also returns the connection to the pool meaning that it is not safe to continue using the PGTransaction after <code class=\"language-text\">commit</code> has been called.</p>\n<p>N.B Attempting to use rollback on a transaction where <code class=\"language-text\">rollback</code> or <code class=\"language-text\">commit</code> has already been called will return an error.</p>\n<h3 id=\"rollback-promisevoid\">rollback(): Promise<void></h3>\n<p>The <code class=\"language-text\">rollback</code> method is used to rollback the changes that have been performed in the transaction to the PostgreSQL database.</p>\n<p>This method also returns the connection to the pool meaning that it is not safe to continue using the PGTransaction after <code class=\"language-text\">rollback</code> has been called.</p>\n<p>N.B Attempting to use rollback on a transaction where <code class=\"language-text\">rollback</code> or <code class=\"language-text\">commit</code> has already been called will return an error.</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/reference/database/PostgreSQL/#pgstore\">PGStore</a></p>\n<ul>\n<li><a href=\"/reference/database/PostgreSQL/#constructorpoolparameters\">constructor(poolParameters)</a></li>\n<li><a href=\"/reference/database/PostgreSQL/#queryrquerystring-parameters-promisearrayr\">query&#x3C;R>(queryString, parameters): Promise&#x3C;Array&#x3C;R>></a></li>\n<li><a href=\"/reference/database/PostgreSQL/#createtransactionisolationlevel-promisepgtransaction\">createTransaction(isolationLevel?): Promise&#x3C;PGTransaction></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/reference/database/PostgreSQL/#pgtransaction\">PGTransaction</a></p>\n<ul>\n<li><a href=\"/reference/database/PostgreSQL/#constructorconnection-logger\">constructor(connection, logger?)</a></li>\n<li><a href=\"/reference/database/PostgreSQL/#queryrquerystring-parameters-promisearrayr-1\">query&#x3C;R>(queryString, parameters): Promise&#x3C;Array&#x3C;R>></a></li>\n<li><a href=\"/reference/database/PostgreSQL/#commit-promisevoid\">commit(): Promise&#x3C;void></a></li>\n<li><a href=\"/reference/database/PostgreSQL/#rollback-promisevoid\">rollback(): Promise&#x3C;void></a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"PostgreSQL","module":"Database"}}},"pageContext":{"slug":"/reference/database/PostgreSQL/"}}